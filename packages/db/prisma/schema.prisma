// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}




model User {
  id            String   @id @default(uuid())
  name          String?
  email         String?   @unique
  provider      AuthProvider
  gamesAsWhite  Game[]   @relation("GamesAsWhite")
  gamesAsBlack  Game[]   @relation("GamesAsBlack")
  createdAt     DateTime @default(now())
}

model Game {
  id            String     @id 
  whitePlayerId String
  blackPlayerId String
  whitePlayer   User       @relation("GamesAsWhite", fields: [whitePlayerId], references: [id])
  blackPlayer   User       @relation("GamesAsBlack", fields: [blackPlayerId], references: [id])
  status        GameStatus
  result        GameResult?
  startingFen   String     @default("rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1") // default value for the startingFen
  currentFen    String?
  startAt       DateTime   @default(now())
  endAt         DateTime?
  moves         Move[]
  @@index([status, result])
}

model Move {
  id          String   @id @default(uuid())
  gameId      String
  game        Game     @relation(fields: [gameId], references: [id])
  from        String
  to          String
  timeTaken   Int?     @default(0)
  createdAt   DateTime @default(now())
  @@index([gameId])
}

enum GameStatus {
  IN_PROGRESS
  COMPLETED
  ABANDONED
  TIME_UP
  PLAYER_EXIT
}

enum GameResult {
  WHITE_WINS
  BLACK_WINS
  DRAW
}



enum AuthProvider {
  GOOGLE
  GUEST
}
